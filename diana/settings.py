"""
Django settings for diana project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from django.http import JsonResponse
from django.utils.translation import ugettext_lazy as _


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'vn5iga)cc=i6n$w&zz45u)$@(#c&oal%77w77b8y0b)bs1o#t6'
try:
    SECRET_KEY = os.environ["SECRET_KEY"]
except KeyError as e:
    raise RuntimeError("Could not find a SECRET_KEY in environment") from e

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'true'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Application startapp

INSTALLED_APPS += [
    'app',
    'api',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',  # swagger
    'django_celery_beat',  # https://github.com/celery/django-celery-beat
    'django_filters',
    'import_export',

    # https://django-constance.readthedocs.io/en/latest/
    # 'constance',
    # 'constance.backends.database',
    'tinymce',
    'django_apscheduler',
    'storages',
    'corsheaders',
    'django_fsm',
    'debug_toolbar',
    'rangefilter',
    'nested_admin',
    'django_celery_results',
    'django.contrib.humanize',
    'smart_selects',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE += [
    # How the language is determined
    # https://www.django-rest-framework.org/topics/internationalization/#how-the-language-is-determined
    'django.middleware.locale.LocaleMiddleware',

    'drf_yasg.middleware.SwaggerExceptionMiddleware',
    # DataFlair #Caching Middleware

    # Cache
    'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',

    # https://github.com/adamchainz/django-cors-headers/
    'corsheaders.middleware.CorsMiddleware',

    # https://django-debug-toolbar.readthedocs.io/
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'diana.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [], # Default
        # {root_project}\templates
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'diana.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MARIADB_DATABASE', 'diana'),
        'USER': os.getenv('MARIADB_ROOT_USER', 'root'),
        'PASSWORD': os.getenv('MARIADB_ROOT_PASSWORD', '123456'),
        # Or an IP Address that your DB is hosted on, 0.0.0.0 in docker linux
        'HOST': os.getenv('MARIADB_CONTAINER_NAME', 'localhost'),
        'PORT': os.getenv('MARIADB_PORT', '3366'),
    },

}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'Asia/Ho_Chi_Minh'  #
TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

# django.db.models.BigAutoField
DEFAULT_AUTO_FIELD = 'app.models.custom_field.UnsignedAutoField'


# REST framework's Settings
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {

    # API version
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    # 'DEFAULT_VERSION': 'v1', # comment tren swagger se hien nhieu phien ban
    # 'ALLOWED_VERSIONS': ('v1', 'v2'),

    # Unix timestamp, only on Docker/Linux
    # 'DATETIME_FORMAT': '%s.%f',

    # 'DATETIME_FORMAT': '%Y-%m-%dT%H:%M:%S.%fZ',

    # Timestamp for Js
    # 'DATETIME_FORMAT': '%s000.%f',

    # 'DATE_FORMAT': '%s000.%f',

    # Render https://www.django-rest-framework.org/api-guide/renderers/

    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        # 'drf_renderer_xlsx.renderers.XLSXRenderer',
    ],

    # Authentication
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    # 'rest_framework.authentication.SessionAuthentication',
    # 'rest_framework.authentication.BasicAuthentication',
    # 'rest_framework.authentication.TokenAuthentication',
    # ],
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', # Lỗi cảnh báo: UnorderedObjectListWarning
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'EXCEPTION_HANDLER': 'app.utils.custom_exception_handler',

    # 'EXCEPTION_HANDLER': 'diana.ultils.exception.custom_exception_handler', # Thông báo lỗi

    # https://www.django-rest-framework.org/api-guide/metadata/
    # 'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',

    # https://www.django-rest-framework.org/api-guide/settings/#default_authentication_classes
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    # ],

    # https://www.django-rest-framework.org/api-guide/throttling/ (giới hạn số lần request/time)
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '5/second',
    #     'user': '1000/day'
    # }

    # 'DEFAULT_PARSER_CLASSES': [
    #     'rest_framework.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser',
    #     'rest_framework.parsers.MultiPartParser',
    # ],
}


# Set path('api-auth/', include('rest_framework.urls')) in urls.py

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'


# Swagger Settings
# https://drf-yasg.readthedocs.io/en/stable/settings.html

SWAGGER_SETTINGS = {
    'SUPPORTED_SUBMIT_METHODS': ['get', 'post', 'put', 'delete', 'patch'],
    'OPERATIONS_SORTER': 'alpha',
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        },
        'api_key': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },

    # Hidden model in swagger docs
    'DEFAULT_FIELD_INSPECTORS': [
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.InlineSerializerInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],

}


# LANGUAGES
# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-LANGUAGES

LANGUAGES = [
    # ('de', _('German')),
    ('en', _('English')),
    # ('vi-vn', _('Vietnamese')),
    # ('ja-JP', _('Japanese')),
]


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://" + os.getenv('REDIS_CONTAINER_NAME', '127.0.0.1') + ":6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_CONNECT_TIMEOUT": 5,  # seconds
            "SOCKET_TIMEOUT": 5,  # seconds
        },
        "KEY_PREFIX": "redis_cache",
        "TIMEOUT": 5,
        "TTL": 5,
    }
}

# SESSION_ENGINE = "django.contrib.sessions.backends.cache" # Lỗi admin re-login khi reloading code
# SESSION_CACHE_ALIAS = "default"


# Locale
# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-LOCALE_PATHS

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]




# https://docs.djangoproject.com/en/3.2/topics/http/views/#customizing-error-views

def custom404(request, exception=None):
    return JsonResponse({
        'status_code': 404,
        'error': 'The resource was not found'
    })
handler404 = custom404
handler500 = None
handler403 = None
handler400 = None


# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-AUTH_USER_MODEL

AUTH_USER_MODEL = 'app.User'


# Email configuration
# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-EMAIL_BACKEND

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.sendinblue.com'
EMAIL_HOST_USER = 'coding.pix@gmail.com'
EMAIL_HOST_PASSWORD = 'Kb3Vtchz6kSGDEds'  # past the key or password app here
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'default from email'


APPEND_SLASH = True  # dấu / cuối URL
PREPEND_WWW = False  # www

# Djano Cors Header configuration
# https://github.com/adamchainz/django-cors-headers

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOWED_ORIGINS = [
#     # "https://example.com",
#     # "https://sub.example.com",
#     # "http://localhost:8080",
#     "http://localhost:3000",
#     "http://localhost",
#     # "http://127.0.0.1:9000",
#     "https://diana-dev.webdigital.vn",
#     "https://app-diana-dev.webdigital.vn",
# ]

# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https://localhost",
#     r"^http://localhost",
#     r"^https://\w+\.webdigital\.vn$",
# ]

# Celery configuration
# https://docs.celeryproject.org/en/stable/userguide/configuration.html

CELERY_BROKER_URL = 'redis://' + os.getenv('REDIS_CONTAINER_NAME', '127.0.0.1') + ':6379/1'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'redis://' + os.getenv('REDIS_CONTAINER_NAME', '127.0.0.1') + ':6379/1'
CELERY_RESULT_BACKEND = 'django-db'



# https://docs.graphene-python.org/

GRAPHENE = {
    "SCHEMA": "app.schema.schema"
}

# CONSTANCE_CONFIG = {
#     'THE_ANSWER': ('', 'Answer to the Ultimate Question of Life, '
#                        'The Universe, and Everything'),
#     'SITE_NAME': (42, 'Answer to the Ultimate Question of Life, '
#                   'The Universe, and Everything'),
#     'SITE_DESCRIPTION': (42, 'Answer to the Ultimate Question of Life, '
#                          'The Universe, and Everything'),
#     'THEME': (42, 'Answer to the Ultimate Question of Life, '
#               'The Universe, and Everything'),
# }

# CONSTANCE_CONFIG_FIELDSETS = {
#     'General Options': {
#         'fields': ('SITE_NAME', 'SITE_DESCRIPTION'),
#         'collapse': True
#     },
#     'Theme Options': ('THEME',),
#     'Test Options': ('THE_ANSWER',),
# }

# CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
# CONSTANCE_DATABASE_CACHE_BACKEND = 'default'

# https://django-tinymce.readthedocs.io/
TINYMCE_DEFAULT_CONFIG = {
    "height": "320px",
    "menubar": "file edit view insert format tools table help",
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
    "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
    "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
    "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
    "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
    "a11ycheck ltr rtl | showcomments addcomment code",
    "custom_undo_redo_levels": 10,
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=31),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Admin
AUTH_PASSWORD_VALIDATORS = []



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

USE_S3 = os.getenv('USE_S3') == 'true'

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings

    # STATIC_LOCATION = 'static'
    # STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'

    # STATICFILES_STORAGE = 'hello_django.storage_backends.StaticStorage'
    # s3 public media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    # MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # s3 private media settings
    PRIVATE_MEDIA_LOCATION = 'private'
    # PRIVATE_FILE_STORAGE = 'hello_django.storage_backends.PrivateMediaStorage'

IMAGE_RESIZE = {
    'thumbnail': 240,
    'medium': 480,
    'large': 960
}

# https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-USE_X_FORWARDED_HOST

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

if DEBUG:
    # Fix 403 Forbidden admin error while login
    SESSION_COOKIE_SECURE = False

if DEBUG:
    import os  # only if you haven't already imported this
    import socket  # only if you haven't already imported this
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]


CONTAINER_MAX_ITEMS = os.getenv('CONTAINER_MAX_ITEMS', 1000)

USE_THOUSAND_SEPARATOR = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': MEDIA_ROOT / 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}



LOGGING_CONFIG = None # This empties out Django's logging config

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '\n[%(levelname)s] %(asctime)s %(name)s.%(funcName)s:%(lineno)s:\n%(message)s\n'
        },
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            # 'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 'django_sol.urls': {
        #     'level': 'DEBUG',
        #     'class': 'logging.StreamHandler',
        #     'formatter': 'simple',
        # },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            'level': 'INFO',
            'formatter': 'simple',
            'class': 'logging.FileHandler',
            'filters': ['require_debug_false'],
            'filename': MEDIA_ROOT / 'debug.log',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}


import logging
import logging.config

logging.config.dictConfig(LOGGING) # Finally replace our config in python logging
